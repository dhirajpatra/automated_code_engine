### Folder Structure
```
app/
    __init__.py
    main.py
models/
    __init__.py
    user.py
schemas/
    __init__.py
    user.py
routes/
    __init__.py
    auth.py
database.py
requirements.txt
```

#### File Contents

**app/__init__.py**
```python
# This file is intentionally left blank.
```

**app/main.py**
```python
from fastapi import FastAPI
from routes.auth import router as auth_router
from database import engine
from models.user import Base

# Create the database tables
Base.metadata.create_all(bind=engine)

app = FastAPI(title="User Authentication API", description="API for user registration and login.", version="1.0.0")

app.include_router(auth_router)
```

**models/__init__.py**
```python
# This file is intentionally left blank.
```

**models/user.py**
```python
from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    email = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)

    def __repr__(self):
        return f"<User(username={self.username}, email={self.email})>"
```

**schemas/__init__.py**
```python
# This file is intentionally left blank.
```

**schemas/user.py**
```python
from pydantic import BaseModel, EmailStr

class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str
    confirmPassword: str

class UserLogin(BaseModel):
    username: str
    password: str

class UserResponse(BaseModel):
    username: str
    email: EmailStr

    class Config:
        orm_mode = True
```

**routes/__init__.py**
```python
# This file is intentionally left blank.
```

**routes/auth.py**
```python
from fastapi import APIRouter, HTTPException, status
from sqlalchemy.orm import Session
from models.user import User
from schemas.user import UserCreate, UserLogin, UserResponse
from database import get_db
from passlib.context import CryptContext
from fastapi import Depends

router = APIRouter()
bcrypt_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

@router.post("/api/v1/auth/register", response_model=UserResponse, status_code=status.HTTP_201_CREATED)
def register_user(user: UserCreate, db: Session = Depends(get_db)):
    if user.password != user.confirmPassword:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Passwords do not match")
    
    hashed_password = bcrypt_context.hash(user.password)
    db_user = User(username=user.username, email=user.email, hashed_password=hashed_password)

    db.add(db_user)
    db.commit()
    db.refresh(db_user)

    return UserResponse(username=db_user.username, email=db_user.email)

@router.post("/api/v1/auth/login", response_model=UserResponse, status_code=status.HTTP_200_OK)
def login_user(user: UserLogin, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.username == user.username).first()
    
    if not db_user or not bcrypt_context.verify(user.password, db_user.hashed_password):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")
    
    return UserResponse(username=db_user.username, email=db_user.email)
```

**database.py**
```python
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session

DATABASE_URL = "sqlite:///./test.db"

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db: Session = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

**requirements.txt**
```
fastapi
uvicorn
sqlalchemy
pydantic
passlib[bcrypt]
```
